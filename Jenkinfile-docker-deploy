pipeline {
    agent {label 'slave99'}
    tools { 
        maven 'maven' 
      
    }
stages { 
     
 stage('Preparation') { 
     steps {
 //for display purposes

    //   Get some code from a GitHub repository

      git 'https://github.com/anilkumarpuli/game-of-life.git'

      // Get the Maven tool.
     
 // ** NOTE: This 'M3' Maven tool must be configured
 
     // **       in the global configuration.   
     }
   }


   stage('Build') {
       steps {
      //  Run the maven build

     // if (isUnix()) {
        sh 'mvn -Dmaven.test.failure.ignore=true install'
      //} 
      //else {
        //bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      // }
}
   }
 
  stage('Unit Test Results') {
      steps {
      junit '**/target/surefire-reports/TEST-*.xml'
      
      }
 }
  stage('Sonarqube') {
    environment {
       scannerHome = tool 'sonar'
    }
    steps {
        withSonarQubeEnv('sonar') {
            sh "${scannerHome}/bin/sonar-scanner"
        }
        
    }
}
     stage('Artifact upload to nexus') {
      steps {
nexusArtifactUploader artifacts: [[artifactId: 'mavenartifactory', classifier: 'anilkumar', file: '/home/ansible/workspace/samp1/gameoflife-web/target/gameoflife.war', type: 'war']], credentialsId: 'nexu-id', groupId: 'meven_id', nexusUrl: '172.31.2.67:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'mavenrepo', version: '$BUILD_ID'      
       }
      }
    stage('Build and tag')
        {
      steps{
        sh 'docker build -t gameoflife-image:$BUILD_NUMBER .'
        sh "docker tag gameoflife-image:$BUILD_NUMBER docker.io/anilkumblepuli/gameoflife-image:$BUILD_NUMBER"
      }
     }
     stage('push to Hub')
      {
     steps{
       withCredentials([string(credentialsId: 'doc_Dcred', variable: 'doc_Dcred')]) {
             sh "docker login -u anilkumblepuli -p ${doc_Dcred}"
             sh" docker push docker.io/anilkumblepuli/gameoflife-image:$BUILD_NUMBER"
               }
          }     
   } 
   stage('deploy to kubernetes')
      {
      steps{
     sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible_server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''ansible-playbook deploycreate.yml 
ansible-playbook servicecreate.yml''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/home/ansible/playbook', remoteDirectorySDF: false, removePrefix: 'home/ansible/playbook', sourceFiles: 'home/ansible/playbook/*.yml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])      }
      }
      }
      post{
        success {
            archiveArtifacts 'gameoflife-web/target/*.war'
        }
        failure {
            mail to:"sankar.dadi@qentelli.com", subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Build failed"
        }
    }       
}

